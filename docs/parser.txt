Parser Documentation
====================

Create parser:
   JSONParser p = new JSONParser();
   
To create JSON from object:
   p.createJSON(String FILENAME, Object OBJECT);
      - Will create a JSON file "JSONs/FILENAME.json" that represents OBJECT
   
   --ex. p.createJSON("winconditions", new WinCondition());
   
To create object from JSON:
   p.createObject(String FILENAME, Class CLASS);
      - Will read from JSON file "JSONs/FILENAME.json" and return an object of type whatever CLASS is
      - Works with ALL Java types (as far as I've tested), so to efficiently store/load multiple objects (like default characters), just group them into a collection/list/map/whatever and then serialize/deserialize that.
      
   --ex. WinCondition wc = (WinCondition) p.createObject("winconditions", WinCondition.class);
   
Annotations for objects that will be serialized (turned into JSON):
   - @JsonAutoDetect goes above the class declaration
   - @JsonProperty goes above things you want to store (just instance variables, I hope)
   - Your class needs EITHER
      - a constructor with no parameters (easy, since all your data is loaded in anyways)
      - a constructor with parameters annotated with @JsonProperty("VARIABLEKEYNAME") before each parameter
      
   --ex. See "PositionCondition" object